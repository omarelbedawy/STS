/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and shared access with role based access control for classroom data.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information, accessible only to the owner.
 * - /classrooms/{classroomId}: Stores classroom metadata.
 * - /classrooms/{classroomId}/schedules/{scheduleId}: Stores classroom schedules.
 * - /classrooms/{classroomId}/explanations/{explanationId}: Stores explanation commitments.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Users cannot list all user profiles.
 * - Classrooms and their schedules and explanations can be read by anyone.
 * - Only authenticated users can create, update, or delete classrooms, schedules, or explanations, and only with owner privileges.
 *
 * Denormalization for Authorization:
 *   No denormalization is used in this basic ruleset.
 *
 * Structural Segregation:
 *   No structural segregation is used in this basic ruleset. All data is stored under the specified paths.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their own profile.
     * @allow (get, update, delete) User with matching ID can read, update, and delete their own profile.
     * @deny (create) User cannot create a profile with an ID that does not match their own.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to classroom metadata.
     * @path /classrooms/{classroomId}
     * @allow (get, list) Anyone can read classroom metadata.
     * @allow (create) Authenticated users can create classrooms.
     * @allow (update, delete) Only authenticated users can update or delete classrooms.
     */
    match /classrooms/{classroomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to classroom schedules.
     * @path /classrooms/{classroomId}/schedules/{scheduleId}
     * @allow (get, list) Anyone can read classroom schedules.
     * @allow (create) Authenticated users can create schedules.
     * @allow (update, delete) Only authenticated users can update or delete schedules.
     */
    match /classrooms/{classroomId}/schedules/{scheduleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to explanation commitments.
     * @path /classrooms/{classroomId}/explanations/{explanationId}
     * @allow (get, list) Anyone can read explanation commitments.
     * @allow (create) Authenticated users can create explanation commitments.
     * @allow (update, delete) Only authenticated users can update or delete explanation commitments.
     */
    match /classrooms/{classroomId}/explanations/{explanationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}